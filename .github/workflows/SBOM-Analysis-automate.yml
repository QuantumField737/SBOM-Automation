name: Upload SBOM to Dependency-Track & Generate SARIF Report

on:
  push:
    branches:
      - main

jobs:
  upload-sbom:
    runs-on: ubuntu-22.04  # Updated runner version

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check for SBOM file
        id: check-sbom
        run: |
          if [ -d "security-audit" ] && [ -n "$(ls -A security-audit/*.json 2>/dev/null)" ]; then
            SBOM_FILE=$(ls -A security-audit/*.json | head -n 1)
            echo "SBOM_FILE=$SBOM_FILE" >> $GITHUB_ENV
          else
            echo "No SBOM file found. Exiting."
            exit 0
          fi

      - name: Upload SBOM to Dependency-Track
        run: |
          PROJECT_UUID="700aa36e-7240-4864-a717-2a7c6651c392"

          # Upload SBOM as a file
          curl -s -X POST "$DEP_TRACK_URL/api/v1/bom" \
            -H "X-Api-Key: $DEP_TRACK_API_KEY" \
            -F "project=$PROJECT_UUID" \
            -F "bom=@$SBOM_FILE"
        env:
          DEP_TRACK_URL: ${{ secrets.DEP_TRACK_URL }}
          DEP_TRACK_API_KEY: ${{ secrets.DEP_TRACK_API_KEY }}

      - name: Wait for Dependency-Track Processing
        run: sleep 180  # Wait 3 minutes for analysis

      - name: Fetch Security Report & Save SARIF
        run: |
          PROJECT_UUID="700aa36e-7240-4864-a717-2a7c6651c392"
          
          REPORT=$(curl -s "$DEP_TRACK_URL/api/v1/metrics/project/$PROJECT_UUID/current" \
            -H "X-Api-Key: $DEP_TRACK_API_KEY")

          HIGH=$(echo $REPORT | jq '.vulnerabilities.high')
          CRITICAL=$(echo $REPORT | jq '.vulnerabilities.critical')
          RISK_SCORE=$(echo $REPORT | jq '.riskScore')

          mkdir -p security-audit  # Ensure folder exists

          SARIF_FILE="security-audit/deptrack-results.sarif"

          cat <<EOF > $SARIF_FILE
          {
            "version": "2.1.0",
            "runs": [{
              "tool": {
                "driver": {
                  "name": "Dependency-Track",
                  "rules": [{
                    "id": "high-vulnerabilities",
                    "shortDescription": {"text": "High severity vulnerabilities"},
                    "fullDescription": {"text": "Detected high severity vulnerabilities in project"},
                    "defaultConfiguration": {"level": "warning"}
                  }, {
                    "id": "critical-vulnerabilities",
                    "shortDescription": {"text": "Critical severity vulnerabilities"},
                    "fullDescription": {"text": "Detected critical severity vulnerabilities in project"},
                    "defaultConfiguration": {"level": "error"}
                  }]
                }
              },
              "results": [{
                "ruleId": "high-vulnerabilities",
                "level": "warning",
                "message": {"text": "High severity vulnerabilities: $HIGH"}
              }, {
                "ruleId": "critical-vulnerabilities",
                "level": "error",
                "message": {"text": "Critical severity vulnerabilities: $CRITICAL"}
              }],
              "properties": {
                "riskScore": "$RISK_SCORE"
              }
            }]
          }
          EOF

          echo "SARIF report saved at 
